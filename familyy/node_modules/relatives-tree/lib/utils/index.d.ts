import Store from '../store';
import Unit from '../models/unit';
import { IFamilyNode, IRelation } from '../types';
declare const prop: <T, K extends keyof T>(name: K) => (item: T) => T[K];
declare const withId: <T extends {
    id: any;
}, K extends "id">(id: T[K]) => (item: T) => boolean;
declare const withType: <T extends {
    type: string;
}>(...types: string[]) => (item: T) => boolean;
declare const withSameIDs: (target: Unit) => (unit: Unit) => boolean;
declare const flat: <T>(items: readonly T[], item: readonly T[]) => T[];
declare const unique: <T>(item: T, index: number, arr: T[]) => boolean;
declare const inAscOrder: (v1: number, v2: number) => number;
declare const pipe: (...fus: Function[]) => <T>(init: T) => T;
declare const relToNode: (store: Store) => (rel: IRelation) => IFamilyNode;
declare const min: (arr: number[]) => number;
declare const max: (arr: number[]) => number;
declare const hasDiffParents: (node: IFamilyNode) => boolean;
export { prop, withId, withType, withSameIDs, flat, unique, inAscOrder, pipe, relToNode, min, max, hasDiffParents, };
