import hasHiddenRelatives from './hasHiddenRelatives';
import { flat } from './index';
const PARENTS = ['root', 'parent'];
const CHILDREN = ['root', 'child'];
function extendNode(family) {
    return (unit) => (unit.nodes.map((node, idx) => (Object.assign(Object.assign({}, node), { top: family.top + (unit.isChild && !!family.pUnits.length ? 2 : 0), left: family.left + unit.shift + (idx * 2), hasSubTree: hasHiddenRelatives(family, node) }))));
}
function getParentNodes(family) {
    return (PARENTS.includes(family.type) ? family.pUnits : []).map(extendNode(family));
}
function getChildNodes(family) {
    return (CHILDREN.includes(family.type) ? family.cUnits : []).map(extendNode(family));
}
function mapFamily(family) {
    return [...getParentNodes(family), ...getChildNodes(family)].reduce(flat, []);
}
export default (families) => {
    return families.map(mapFamily).reduce(flat);
};
//# sourceMappingURL=getExtendedNodes.js.map